knitr::opts_chunk$set(echo = T, warning = F, message = F)
barplot(c("H", "T"), c(0.2, 0.8))
barplot(c("H", "T"), c(0.2, 0.8))
?barplot
barplot(c(0.2, 0.8))
?barplot
barplot(c(0.2, 0.8), names.arg = c("H", "T"))
barplot(c(0.2, 0.8), names.arg = c("H", "T"))
?barplot
require(Hmisc)
d <- csv.get('bodyfat.csv', lowernames=TRUE)
install.packages("Hmisc")
require(Hmisc)
d <- csv.get('bodyfat.csv', lowernames=TRUE)
read.csv(url("https://hbiostat.org/data/repo/bodyfat.csv"))
dat = read.csv(url("https://hbiostat.org/data/repo/bodyfat.csv"))
dim(dat)
library(Hmisc)
# Load required package
library(ggplot2)
# Parameters for the normal distribution
mean_value <- 0
sd_value <- 1
# Calculate quartiles
Q1 <- qnorm(0.25, mean = mean_value, sd = sd_value)
Q2 <- qnorm(0.50, mean = mean_value, sd = sd_value)  # Median
Q3 <- qnorm(0.75, mean = mean_value, sd = sd_value)
# Generate data for the PDF plot
x <- seq(mean_value - 4*sd_value, mean_value + 4*sd_value, length.out = 1000)
y <- dnorm(x, mean = mean_value, sd = sd_value)
data <- data.frame(x = x, y = y)
# Plotting the normal PDF
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
geom_vline(xintercept = Q1, linetype = "dashed", color = "red") +
geom_vline(xintercept = Q2, linetype = "dashed", color = "green") +
geom_vline(xintercept = Q3, linetype = "dashed", color = "purple") +
labs(title = "Normal Distribution with Quartiles",
x = "Value",
y = "Density") +
theme_minimal() +
annotate("text", x = Q1, y = 0.05, label = "Q1", color = "red", vjust = -0.5) +
annotate("text", x = Q2, y = 0.05, label = "Q2 (Median)", color = "green", vjust = -0.5) +
annotate("text", x = Q3, y = 0.05, label = "Q3", color = "purple", vjust = -0.5)
# Print the plot
print(p)
# Load required package
library(ggplot2)
# Parameters for the normal distribution
mean_value <- 0
sd_value <- 1
# Calculate quartiles
Q1 <- qnorm(0.25, mean = mean_value, sd = sd_value)
Q2 <- qnorm(0.50, mean = mean_value, sd = sd_value)  # Median
Q3 <- qnorm(0.75, mean = mean_value, sd = sd_value)
# Generate data for the PDF plot
x <- seq(mean_value - 4*sd_value, mean_value + 4*sd_value, length.out = 1000)
y <- dnorm(x, mean = mean_value, sd = sd_value)
data <- data.frame(x = x, y = y)
# Plotting the normal PDF with legends at the top right
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
geom_vline(aes(xintercept = Q1, color = "Q1 (25th percentile)"), linetype = "dashed") +
geom_vline(aes(xintercept = Q2, color = "Q2 (Median)"), linetype = "dashed") +
geom_vline(aes(xintercept = Q3, color = "Q3 (75th percentile)"), linetype = "dashed") +
labs(title = "Normal Distribution with Quartiles",
x = "Value",
y = "Density") +
scale_color_manual(name = "Quartiles",
values = c("Q1 (25th percentile)" = "red",
"Q2 (Median)" = "green",
"Q3 (75th percentile)" = "purple")) +
theme_minimal() +
theme(legend.position = "top", legend.justification = "right")
# Print the plot
print(p)
# Load required package
library(ggplot2)
# Parameters for the normal distribution
mean_value <- 0  # μ
sd_value <- 1    # σ
# Calculate quartiles
Q1 <- qnorm(0.25, mean = mean_value, sd = sd_value)
Q2 <- qnorm(0.50, mean = mean_value, sd = sd_value)  # Median
Q3 <- qnorm(0.75, mean = mean_value, sd = sd_value)
# Generate data for the PDF plot
x <- seq(mean_value - 4*sd_value, mean_value + 4*sd_value, length.out = 1000)
y <- dnorm(x, mean = mean_value, sd = sd_value)
data <- data.frame(x = x, y = y)
# Plotting the normal PDF with custom x-axis labels and legends at the top right
p <- ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
geom_vline(aes(xintercept = Q1, color = "Q1 (25th percentile)"), linetype = "dashed") +
geom_vline(aes(xintercept = Q2, color = "Q2 (Median)"), linetype = "dashed") +
geom_vline(aes(xintercept = Q3, color = "Q3 (75th percentile)"), linetype = "dashed") +
labs(title = "Normal Distribution with Quartiles",
x = expression(mu),
y = "Density") +
scale_x_continuous(
breaks = c(mean_value - sd_value, mean_value, mean_value + sd_value),
labels = c(expression(mu - sigma), expression(mu), expression(mu + sigma))
) +
scale_color_manual(name = "Quartiles",
values = c("Q1 (25th percentile)" = "red",
"Q2 (Median)" = "green",
"Q3 (75th percentile)" = "purple")) +
theme_minimal() +
theme(legend.position = "top", legend.justification = "right")
# Print the plot
print(p)
?t.test
var(mtcars$mpg)
data("mtcars")
mpgs = mtcars$mpg
xbar = mean(mpgs)
xbar
z <- qnorm(0.975)
z
zscore = qnorm(0.95)
sigma = 35
n = nrow(mtcars)
lifespan = c(39, 50, 82, 37, 42, 40, 41, 16, 32)
quantile(lifespan, 0.25)
quantile(lifespan, 0.25, 0.75)
quantile(lifespan, c(0.25, 0.75))
quantile(lifespan, c(0.25, 0.5, 0.75))
IQR(lifespan)
IQR(lifespan)
data("mtcars")
weights = mtcars$wt
boxplot(weights)
weights = c(1.87,3.75,3.79,3.82,3.85,3.87,3.90,3.94,3.96,3.99, 3.99,4.00,4.03,4.04,4.05,4.06,4.09,8.97,39.8)
Q_1 = quantile(weights, 0.25)
iqr = IQR(weights)
lower = Q_1 - 1.5 * iqr
lower
upper = Q_3 + 1.5 * iqr
Q_3 = quantile(weights, 0.75)
upper = Q_3 + 1.5 * iqr
upper
weights = c(1.87,3.75,3.79,3.82,3.85,3.87,3.90,3.94,3.96,3.99,
3.99,4.00,4.03,4.04,4.05,4.06,4.09,8.97,39.8)
weights_no_outliers =  c(3.75,3.79,3.82,3.85,3.87,3.90,3.94,3.96,3.99,
3.99,4.00,4.03,4.04,4.05,4.06,4.09)
var(weights)
var(weights_no_outliers)
IQR(weights)
IQR(weights_no_outliers)
?bs
library(splines)
?bs
df = c(8, 7, 5, 7, 5, 10, 6, 8, 5, 10, 0)
df
mean(df)
median(df)
var(df)
df = c(8, 7, 8.5, 7.5, 9.5, 10, 6.5, 8, 6.5, 10, 0)
df
mean(df)
median(df)
var(df)
sd(df)
IQR(df)
df = c(8, 7, 6.5, 7.5, 6.5, 10, 8.5, 8, 7, 10, 75)
mean(df)
median(df)
vr(df)
sd(df)
IQR(df)
boxpl;ot(df)
boxplot(df)
df = c(8, 7, 6.5, 7.5, 6.5, 10, 8.5, 8, 7, 10, 55)
boxplot(df)
bodyfat_data = read.csv(url("https://hbiostat.org/data/repo/bodyfat.csv"))
bodyfat_data$Age
bodyfat_data$Neck
bodyfat_data$Density
bodyfat_data$Neck
mean(bodyfat_data$Weight)
mean(bodyfat_data$BodyFat)
# Install the quantmod package if you haven't already
install.packages("quantmod")
# Load the package
library(quantmod)
# Fetch stock data from Yahoo Finance (Apple Inc.)
getSymbols("AAPL", src = "yahoo", from = "2020-01-01", to = Sys.Date())
# View the first few rows of the data
head(AAPL)
# Plot the closing prices
chartSeries(AAPL, theme = chartTheme("white"), TA = NULL,
main = "Apple Inc. Stock Price (AAPL)",
ylab = "Price (USD)", xlab = "Date")
# Add a 50-day Simple Moving Average (SMA) and Volume to the plot
addSMA(n = 50, col = "blue")
addVo()
?chartSeries
# Install necessary packages if you don't have them
install.packages("rnoaa")
install.packages("
rnoaa")"
# Install necessary packages if you don't have them
install.packages("rnoaa")
install.packages("tidyverse")
# Load the libraries
library(rnoaa)
# Install necessary packages if you don't have them
install.packages("rnoaa")
install.packages("tidyverse")
# Load the libraries
library(rnoaa)
library(remotes)
install_github("ropensci/rnoaa")
?stl
knitr::opts_chunk$set(echo = T, warning = F, message = F)
# Convert to time series object
temperature_ts <- ts(temperature, frequency = 365, start = c(1, 1))
```{r echo=T, eval=F}
# Load required library
library(ggplot2)
# Set seed for reproducibility
set.seed(42)
# Create time sequence: 3 years of daily data
days <- 365 * 3
time <- seq(1, days)
# Simulate components of time series
trend <- 15 + 0.005 * time                # Trend: Gradual increase over time
seasonality <- 10 * sin(2 * pi * time / 365)  # Seasonality: Yearly cycle (sine wave)
cycle <- 5 * sin(2 * pi * time / 2000)    # Cycle: Long-term cycles (e.g., 5-year cycle)
noise <- rnorm(days, sd = 2)              # Noise: Random fluctuations
# Combine all components into the temperature time series
temperature <- trend + seasonality + cycle + noise
# Create a data frame for plotting
temperature_data <- data.frame(
Day = time,
Temperature = temperature
)
# Plot the combined time series
ggplot(temperature_data, aes(x = Day, y = Temperature)) +
geom_line(color = "blue") +
labs(title = "Simulated Daily Temperature Data", y = "Temperature (°C)", x = "Day") +
theme_minimal()
library(ggplot2)
# Set seed for reproducibility
set.seed(42)
# Create time sequence: 3 years of daily data
days <- 365 * 30
time <- seq(1, days)
# Simulate components of time series
trend <- 15 + 0.005 * time                # Trend: Gradual increase over time
seasonality <- 10 * sin(2 * pi * time / 365)  # Seasonality: Yearly cycle (sine wave)
cycle <- 5 * sin(2 * pi * time / 2000)    # Cycle: Long-term cycles (e.g., 5-year cycle)
noise <- rnorm(days, sd = 2)              # Noise: Random fluctuations
# Combine all components into the temperature time series
temperature <- trend + seasonality + cycle + noise
# Create a data frame for plotting
temperature_data <- data.frame(
Day = time,
Temperature = temperature
)
# Plot the combined time series
ggplot(temperature_data, aes(x = Day, y = Temperature)) +
geom_line(color = "blue") +
labs(title = "Simulated Daily Temperature Data", y = "Temperature (°C)", x = "Day") +
theme_minimal()
# Convert to time series object
temperature_ts <- ts(temperature, frequency = 365, start = c(1, 1))
# Decompose the time series
decomposed <- stl(temperature_ts, s.window = "periodic")
decomposed
decomposed$weights
decomposed$time.series
head(decomposed$time.series)
ts(temperature)
decomposed <- stl(ts(temperature), s.window = "periodic")
ts(temperature)
decomposed <- stl(ts(temperature), s.window = 365)
temperature_ts <- ts(temperature, frequency = 365, start = c(1, 1))
temperature_ts <- ts(temperature, frequency = 365)
temperature_ts <- ts(temperature, frequency = 365)
decomposed <- stl(temperature_ts, s.window = "periodic")
head(decomposed$time.series)
?ts
as.ts(temperature)
stl(as.ts(temperature))
stl(as.ts(temperature), s.window = 365)
stl(as.ts(temperature), s.window = "periodic")
plot(x = decomposed$time.series[,1])
plot(x = decomposed$time.series[,2])
plot(x = decomposed$time.series[,3])
plot(decomposed$time.series[,2], ylab = "", main = "Trend")
plot(decomposed$time.series[,2], ylab = "", main = "Trend")
?arima.sim
# Fit an AR(2) model to the simulated data
ar_model <- arima(ar_data, order = c(2, 0, 0))  # AR(2) model
# Simulate an AR(2) process with specified AR coefficients
set.seed(123)
ar_data <- arima.sim(n = 100, model = list(ar = c(0.7, -0.3)))
# Plot the simulated data
autoplot(ts(ar_data), main = "Simulated AR(2) Process")
library(forecast)
library(forecast)
library(ggplot2)
# Simulate an AR(2) process with specified AR coefficients
set.seed(123)
ar_data <- arima.sim(n = 100, model = list(ar = c(0.7, -0.3)))
# Plot the simulated data
autoplot(ts(ar_data), main = "Simulated AR(2) Process")
autoplot(ar_data)
# Plot the time series
autoplot(ar1_process, type = "l", main = "Simulated AR(1) Process", ylab = "Value", xlab = "Time")
# Simulate AR(1) process
set.seed(123)
n <- 100
ar1_process <- arima.sim(model = list(ar = 0.7), n = n)
# Plot the time series
autoplot(ar1_process, type = "l", main = "Simulated AR(1) Process", ylab = "Value", xlab = "Time")
ar_model <- arima(ar1_data, order = c(1, 0, 0))
# Simulate an MA(2) process
set.seed(123)
ma_data <- arima.sim(model = list(ma = c(0.5, 0.4)), n = 100)
autoplot(ma_data)
?stl
# Load required library
library(ggplot2)
# Set seed for reproducibility
set.seed(42)
# Create time sequence: 3 years of daily data
days <- 365 * 30
time <- seq(1, days)
# Simulate components of time series
trend <- 15 + 0.005 * time                # Trend: Gradual increase over time
seasonality <- 10 * sin(2 * pi * time / 365)  # Seasonality: Yearly cycle (sine wave)
cycle <- 5 * sin(2 * pi * time / 2000)    # Cycle: Long-term cycles (e.g., 5-year cycle)
noise <- rnorm(days, sd = 2)              # Noise: Random fluctuations
# Combine all components into the temperature time series
temperature <- trend + seasonality + cycle + noise
# Create a data frame for plotting
temperature_data <- data.frame(
Day = time,
Temperature = temperature
)
# Plot the combined time series
ggplot(temperature_data, aes(x = Day, y = Temperature)) +
geom_line(color = "blue") +
labs(title = "Simulated Daily Temperature Data", y = "Temperature (°C)", x = "Day") +
theme_minimal()
temperature
temperature_ts <- ts(temperature, frequency = 365)
temperature_ts
decomposed = stl(temperature_ts, s.window = "periodic")
head(decomposed$time.series)
library("forecast")
arima.sim(model = list(ar = 0.7), 1000)
autoplot(ar_dat)
library("forecast")
ar_data = arima.sim(model = list(ar = 0.7), 1000)
autoplot(ar_data)
library("forecast")
ar_data = arima.sim(model = list(ar = 0.9), 1000)
autoplot(ar_data)
library("forecast")
ar_data = arima.sim(model = list(ar = 0.1), 1000)
autoplot(ar_data)
library("forecast")
ar_data = arima.sim(model = list(ar = 0.0), 1000)
autoplot(ar_data)
library("forecast")
ar_data = arima.sim(model = list(ar = -0.8), 1000)
autoplot(ar_data)
library("forecast")
ar_data = arima.sim(model = list(ar = 0.95), 1000)
autoplot(ar_data)
ma_data = arima.sim(model = list(ma = 0.95), 1000)
autoplot(ma_data)
ar_data = arima.sim(model = list(ar = 0.95), 1000)
autoplot(ar_data)
ar1_model <- arima(ar_data, order = c(1, 0, 0))
summary(ar1_model)
forecast(ar1_model, h = 100)
autoplot(forecast(ar1_model, h = 100))
autoplot(forecast(ar1_model, h = 500))
ma_model = arima(ma_data, order = c(0, 0, 1))
summary(ma_model)
autoplot(forecast(ma_model, h = 500))
ma_model = arima(ma_data, order = c(0, 0, 10))
summary(ma_model)
autoplot(forecast(ma_model, h = 500))
ma_model = arima(ma_data, order = c(0, 0, 100))
# Plot the closing prices
chartSeries(AAPL, theme = chartTheme("white"), TA = NULL,
main = "Apple Inc. Stock Price (AAPL)",
ylab = "Price (USD)", xlab = "Date")
library(quantmod)
# Fetch stock data from Yahoo Finance (Apple Inc.)
symbols <- c("AAPL", "MSFT", "GOOG")
getSymbols(symbols, src = "yahoo", from = "2015-01-01", to = Sys.Date())
# Plot the closing prices
chartSeries(AAPL, theme = chartTheme("white"), TA = NULL,
main = "Apple Inc. Stock Price (AAPL)",
ylab = "Price (USD)", xlab = "Date")
library("forecast")
ar_data = arima.sim(model = list(ar = 0.95), 1000)
autoplot(ar_data)
ma_data = arima.sim(model = list(ma = 0.7), 1000)
autoplot(ma_data)
ma_model = arima(ma_data, order = c(0, 0, 100))
ma_model = arima(ma_data, order = c(0, 0, 10))
summary(ma_model)
autoplot(forecast(ma_model, h = 500))
ma_data = arima.sim(model = list(ma = 0.3), 1000)
autoplot(ma_data)
ma_model = arima(ma_data, order = c(0, 0, 10))
summary(ma_model)
autoplot(forecast(ma_model, h = 500))
autoplot(forecast(ma_model, h = 5))
forecast(ma_model, h = 5)
